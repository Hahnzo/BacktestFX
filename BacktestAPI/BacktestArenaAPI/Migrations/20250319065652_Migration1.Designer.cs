// <auto-generated />
using System;
using BacktestArenaAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BacktestArenaAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250319065652_Migration1")]
    partial class Migration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BacktestArenaAPI.Models.Backtest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AverageLoss")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("AverageProfit")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FinalBalance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("LosingTrades")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPnL")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("TotalTrades")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal>("WinRate")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("WinningTrades")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Backtests");
                });

            modelBuilder.Entity("BacktestArenaAPI.Models.MarketData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("High")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("Low")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("Open")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Symbol", "Timeframe", "Timestamp")
                        .IsUnique();

                    b.ToTable("MarketData");
                });

            modelBuilder.Entity("BacktestArenaAPI.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BacktestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ExitPrice")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PnL")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("StopLoss")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("StopPrice")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("TakeProfit")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BacktestId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BacktestArenaAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BacktestArenaAPI.Models.Backtest", b =>
                {
                    b.HasOne("BacktestArenaAPI.Models.User", "User")
                        .WithMany("Backtests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BacktestArenaAPI.Models.Order", b =>
                {
                    b.HasOne("BacktestArenaAPI.Models.Backtest", "Backtest")
                        .WithMany("Orders")
                        .HasForeignKey("BacktestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Backtest");
                });

            modelBuilder.Entity("BacktestArenaAPI.Models.Backtest", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BacktestArenaAPI.Models.User", b =>
                {
                    b.Navigation("Backtests");
                });
#pragma warning restore 612, 618
        }
    }
}
